<source>
  @type tail
  tag raw.testfairy.*
  read_from_head true
  path /opt/testfairy-sessions/**/*.log
  path_key filename
  pos_file /opt/testfairy.pos
  <parse>
    @type json
  </parse>
</source>

# Detect stacktraces
<match raw.testfairy.**>
  @type detect_exceptions
  languages java
  multiline_flush_interval 5
  remove_tag_prefix raw
  stream filename
</match>

# Add stacktraces to message
<filter testfairy.**>
  @type concat
  key message
  stream_identity_key filename
  flush_interval 5
  timeout_label @CORALOGIX
  multiline_start_regexp /^(?!java\.).*/
</filter>

# Extract testfairy metadata
<filter testfairy.**>
  @type parser
  key_name filename
  reserve_data true
  <parse>
    @type regexp
    # extract project, build and session IDs (https://regex101.com/r/dnmZkh/1)
    expression /testfairy-sessions\/projects\/(?<testfairy_project>[0-9]+)\/builds\/(?<testfairy_build>[0-9]+)\/sessions\/(?<testfairy_session>[0-9]+)/
  </parse>
  emit_invalid_record_to_error false
</filter>

# Prevent JSON double quote breaks
<filter testfairy.**>
   @type record_transformer
   enable_ruby
   <record>
      filename "${File.basename(record['filename'])}"
      # prevent double quotes from breaking the JSON string (https://regex101.com/r/CxQzN2/1)
      message "${record['message'].gsub(/(?<=[^\\\\])\"/,\"'\")}"
   </record>
</filter>

# Route logs to Coralogix
<match testfairy.**>
  @type relabel
  @label @CORALOGIX
</match>

# Send to Coralogix
<label @CORALOGIX>
  <match **>
    @type coralogix
    number_of_workers 1
    # debug true
    privatekey "CORALOGIX_PRIVATEKEY"
    appname "CORALOGIX_APPNAME"
    subsystemname "testfairy"
    is_json true
    timestamp_key_name timestamp
  </match>
</label>
